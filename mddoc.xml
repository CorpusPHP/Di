<mddoc>

	<docpage target="README.md" autoloader="psr4" autoloader-root="src" autoloader-root-namespace="Corpus\Di">

        <section title="Corpus Di">
            <text><![CDATA[
[![Latest Stable Version](https://poser.pugx.org/corpus/di/v/stable.png)](https://packagist.org/packages/corpus/di)
[![License](https://poser.pugx.org/corpus/di/license.png)](https://packagist.org/packages/corpus/di)
[![Build Status](https://travis-ci.org/CorpusPHP/Di.svg?branch=master)](https://travis-ci.org/CorpusPHP/Di)
[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/CorpusPHP/Di/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/CorpusPHP/Di/?branch=master)

A Simple Di Container
]]></text>
			<section title="Requirements">
				<text>- PHP 5.3.0+</text>
			</section>
			<section title="Installing">
				<text><![CDATA[
Corpus Di is available through Packagist via Composer.

]]></text>
				<source lang="json">{
	"require": {
		"corpus/di": "1.*"
	}
}</source>
			</section>
			<section title="Usage">
				<text>Getting started with Di the three most important methods follow.
- The `set` method is used to set either the item to return or a lambda to lazily construct it, optionally taking constructor arguments.
- The `get` method is used to retrieve values with memoization after the initial lazy loading.
- The `getNew` is used to invoke the lazy loading creation lambda every call, optionally taking an array of constructor arguments as a second parameter.</text>
				<source lang="php"><![CDATA[<?php

require('vendor/autoload.php');

$di = new \Corpus\Di\Di();

// Eager Loading
$di->set('foo', new Foo());

// Lazy Loading
$di->set('bar', function () {
	return new Bar();
});

// Constructor Parameters
$di->set('baz', function ( $qux ) {
	return new Bar($qux);
});

// Value is memoized, new Bar() is only called once at first `get`.
$bar  = $di->get('bar');
$bar2 = $di->get('bar');

// Calling getNew explicitly avoids the memoization. Constructor params passed as array.
$baz  = $di->getNew('baz', [ 'corge' ]);
$baz2 = $di->getNew('baz', [ 'grault' ]);

// getMany lets you retreive multiple memoized values at once.
list($foo, $bar) = $di->getMany([ 'foo', 'bar' ]);

// getManyNew lets you retreive multiple new values at once, providing for arguments.
list($baz, $baz2) = $di->getManyNew([ ['baz', ['corge']], ['baz', ['grault']] ]);

]]></source>
			<text>Note: [5.4 array syntax](http://us3.php.net/manual/en/language.types.array.php) was used for terseness in this example but 5.3 is completely supported.</text>
			</section>
            <section title="Documentation">
				<file name="src/Di.php"/>
				<file name="src/Exceptions/UndefinedIdentifierException.php"/>
            </section>
        </section>
	</docpage>
</mddoc>